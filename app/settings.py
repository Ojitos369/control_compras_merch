"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
from __future__ import print_function
from googleapiclient.discovery import build 
from google.oauth2 import service_account

from pathlib import Path
import os
from ojitos369.errors import CatchErrors as CE
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
prod_mode = True if str(os.environ.get('RUN_PROD_MODE', True)).title() == 'True' else False
MEDIA_DIR = os.path.join(BASE_DIR, 'media')
url_base = "https://ccm.ojitos369.com" if prod_mode else "http://localhost:8369"
# url_base = "https://ccm.ojitos369.com"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-669zt1^mniot9)s%o-duegsdjblnl=il-3ry1p^m_2u_*)w*2w'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not prod_mode

ALLOWED_HOSTS = ['*']


if not prod_mode:
    CORS_ALLOW_ALL_ORIGINS = True
    CORS_ALLOW_CREDENTIALS = True
    # CORS_ORIGIN_WHITELIST = [
    #     'http://localhost:5173',
    #     'http://localhost:5174',
    # ]
    # regex
    CORS_ORIGIN_REGEX_WHITELIST = [
        r'^(https?://)?localhost.*',
    ]
    CORS_ALLOWED_ORIGIN_REGEXES = [
        r'^(https?://)?localhost.*',
    ]


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'corsheaders',
    'rest_framework',
    
    'commands.apps.CommandsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    'corsheaders.middleware.CorsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

MEDIA_DIR = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# --------------------------------------   EMAILS AND ERRORS   -------------------------------------- #
port = os.environ.get('EMAIL_PORT', None)
email_settings = {
    'smtp_server': os.environ.get('EMAIL_HOST', None),
    'port': int(port) if port else None,
    'sender': os.environ.get('EMAIL_HOST_USER', None),
    'receiver': 'ojitos369@gmail.com',
    'user': os.environ.get('EMAIL_HOST_USER', None),
    'password': os.environ.get('EMAIL_HOST_PASSWORD', None),
}

DEFAULT_FROM_EMAIL = email_settings['sender']
DEFAULT_RECEIVER_EMAIL = email_settings['receiver']
EMAIL_HOST = email_settings['smtp_server']
EMAIL_HOST_USER = email_settings['user']
EMAIL_HOST_PASSWORD = email_settings['password']
DEFAULT_FROM_EMAIL = email_settings['sender']
EMAIL_PORT = email_settings['port']

if not (email_settings['user'] and email_settings['password']):
    email_settings = None

ce = CE(name_project='CCM', email_settings = email_settings)

class MYE(Exception):
    pass


# --------------------------------------   DB   -------------------------------------- #
# DB_HOST, DB_NAME, DB_USER, DB_PASS
# PORT default 3306
DB_DATA = {
    "user": os.environ.get('DB_USER', None),
    "password": os.environ.get('DB_PASS', None),
    "host": os.environ.get('DB_HOST', None),
    "port": int(os.environ.get('DB_PORT', 3306)),
    "name": os.environ.get('DB_NAME', None),
}



SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive'
]
google_drive_file = os.environ.get('GOOGLE_DRIVE_CREDENTIALS_FILENAME', None)
credentials_file = f"{MEDIA_DIR}/json/{google_drive_file}" if google_drive_file else None
credentials = service_account.Credentials.from_service_account_file(credentials_file, scopes=SCOPES)
spreadsheet_service = build('sheets', 'v4', credentials=credentials)
drive_service = build('drive', 'v3', credentials=credentials)
